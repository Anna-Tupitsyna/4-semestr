import numpy as np
import math
import time
import matplotlib.pyplot as plt
import ant_algorithm
import genetic_algorithm
import simulated_annealing
# n - количество городов
for n in range(50, 200, 25):
	X=np.random.randint(-100, 100, n)
	Y=np.random.randint(-100, 100, n)
	coords=list(map(list, zip(X, Y)))
	keys=[ i for i in range(0,len(X))]
	cities=dict(zip(keys, coords))

  (Муравьиный алгоритм) 
	def distance(start, end):
		x_distance=abs(start[0]-end[0])
		y_distance=abs(start[1]-end[1])
		return math.sqrt(pow(x_distance, 2)+pow(y_distance, 2))
	num_iter=n+50
	# отсчёт времени
	t_beg=time.time()
	Colony=ant_algorithm.ant_colony(cities, distance, iterations=num_iter)
	answer_AC=Colony.mainloop()
	dist1=Colony.shortest_distance 
	t_end=time.time()
	t_AC=t_end-t_beg
	x1=[i for i in range(0,n)]
	y1=[i for i in range(0,n)]
	for i in range(0,n):
		x1[i]=cities[answer_AC[i]][0]
		y1[i]=cities[answer_AC[i]][1]

  (Генетический алгоритм)
  cityList=[]
	for i in range(0,n):
		cityList.append(genetic_algorithm.City(x=X[i], y=Y[i]))
  num_of_generations=150+n
	popS=n
	t_beg=time.time()
	answer_GA, dist2=genetic_algorithm.geneticAlgorithm(population=cityList, popSize=popS, eliteSize=20, mutationRate=0.001, generations=num_of_generations)
	t_end=time.time()
	t_GA=t_end-t_beg
	x2=[i for i in range(0,n)]
	y2=[i for i in range(0,n)]
	for i in range(0,n):
		x2[i]=answer_GA[i].x
		y2[i]=answer_GA[i].y

  (Метод имитации отжига)
  stop_T=1e-8
	stop_iter=5000
	t_beg=time.time()
	SA=simulated_annealing.SimAnneal(coords,stopping_T = stop_T, stopping_iter=stop_iter)
	answer_SA=SA.anneal()
	dist3=SA.best_fitness
	t_end=time.time()
	t_SA=t_end-t_beg
  x3=[]; y3=[]
	for i in answer_SA[0]:
		x3.append(coords[i][0])
		y3.append(coords[i][1])
